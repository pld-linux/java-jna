--- jna-4.2.1/src/com/sun/jna/NativeLibrary.java.orig	2015-10-18 14:40:13.000000000 +0200
+++ jna-4.2.1/src/com/sun/jna/NativeLibrary.java	2015-12-13 16:14:09.494386400 +0100
@@ -839,6 +839,9 @@
             //
             if (Platform.isLinux() || Platform.isSolaris()
                 || Platform.isFreeBSD() || Platform.iskFreeBSD()) {
+                if (Platform.isLinux() && Platform.ARCH.equals("x32"))
+                    archPath = "x32";
+                else
                 // Linux & FreeBSD use /usr/lib32, solaris uses /usr/lib/32
                 archPath = (Platform.isSolaris() ? "/" : "") + Pointer.SIZE * 8;
             }
--- jna-4.5.1/src/com/sun/jna/Platform.java.orig	2018-06-28 19:46:05.611493700 +0200
+++ jna-4.5.1/src/com/sun/jna/Platform.java	2018-06-28 19:49:30.964824730 +0200
@@ -236,6 +236,10 @@
         return false;
     }
 
+    public static final boolean isX32() {
+        return ARCH.startsWith("x32");
+    }
+
     static String getCanonicalArchitecture(String arch, int platform) {
 	arch = arch.toLowerCase().trim();
         if ("powerpc".equals(arch)) {
--- jna-4.5.1/src/com/sun/jna/Native.java.orig	2018-06-28 19:46:05.611493700 +0200
+++ jna-4.5.1/src/com/sun/jna/Native.java	2018-06-28 19:50:19.764824118 +0200
@@ -218,7 +218,7 @@
             setProtected(true);
         }
         MAX_ALIGNMENT = Platform.isSPARC() || Platform.isWindows()
-            || (Platform.isLinux() && (Platform.isARM() || Platform.isPPC() || Platform.isMIPS()))
+            || (Platform.isLinux() && (Platform.isARM() || Platform.isPPC() || Platform.isMIPS()) || Platform.isX32())
             || Platform.isAIX()
             || Platform.isAndroid()
             ? 8 : LONG_SIZE;
